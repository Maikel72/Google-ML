# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import tarfile
from IPython.display import display, Image
from scipy import ndimage
from sklearn.linear_model import LogisticRegression
from six.moves.urllib.request import urlretrieve
from six.moves import cPickle as pickle
from matplotlib import pyplot as pyp
from shutil import copy, copyfile
from collections import Counter

# Config the matplotlib backend as plotting inline in IPython
#%matplotlib inline

url = 'http://commondatastorage.googleapis.com/books1000/'
last_percent_reported = None
data_root = '.' # Change me to store data elsewhere

class Imagen :
    def __init__(self, image_path):
        image_path = image_path



def download_progress_hook(count, blockSize, totalSize):
    """A hook to report the progress of a download. This is mostly intended for users with
    slow internet connections. Reports every 5% change in download progress.
    """
    global last_percent_reported
    percent = int(count * blockSize * 100 / totalSize)

    if last_percent_reported != percent:
        if percent % 5 == 0:
            sys.stdout.write("%s%%" % percent)
            sys.stdout.flush()
        else:
            sys.stdout.write(".")
            sys.stdout.flush()

        last_percent_reported = percent

def maybe_download(filename, expected_bytes, force=False):
  """Download a file if not present, and make sure it's the right size."""
  dest_filename = os.path.join(data_root, filename) #join path and data
  if force or not os.path.exists(dest_filename):    #If file does not exist in destination folder, go and download
    print('Attempting to download:', filename)
    filename, _ = urlretrieve(url + filename, dest_filename, reporthook=download_progress_hook)
    print('\nDownload Complete!')
  statinfo = os.stat(dest_filename)
  if statinfo.st_size == expected_bytes:
    print('Found and verified', dest_filename)
  else:
    raise Exception(
      'Failed to verify ' + dest_filename + '. Can you get to it with a browser?')
  return dest_filename

train_filename = maybe_download('notMNIST_large.tar.gz', 247336696)
test_filename = maybe_download('notMNIST_small.tar.gz', 8458043)

num_classes = 10
np.random.seed(133)


def maybe_extract(filename, force=False):
    root = os.path.splitext(os.path.splitext(filename)[0])[0]  # remove .tar.gz \
    # Split the pathname path into a pair (root, ext) such that root + ext == path, \
    # and ext is empty or begins with a period and contains at most one period. \
    # Leading periods on the basename are ignored; splitext('.cshrc') returns ('.cshrc', '').
    if os.path.isdir(root) and not force: #Return True if path is an existing directory. This follows symbolic links\
        # , so both islink() and isdir() can be true for the same path.
        # You may override by setting force=True.
        print('%s already present - Skipping extraction of %s.' % (root, filename))
    else:
        print('Extracting data for %s. This may take a while. Please wait.' % root)
        tar = tarfile.open(filename) #Return a TarFile object for the pathname name. For detailed information on \
        # TarFile objects and the keyword arguments that are allowed, see TarFile Objects.
        # https://docs.python.org/2/library/tarfile.html
        sys.stdout.flush()
        tar.extractall()
        tar.close()
    """***************************** CURIOSA ESTRUCTURA ********************************"""
    data_folders = [os.path.join(root, d) for d in sorted(os.listdir(root)) if os.path.isdir(os.path.join(root, d))]
    """*********************************************************************************"""
    if len(data_folders) != num_classes:
        raise Exception(
            'Expected %d folders, one per class. Found %d instead.' % (
                num_classes, len(data_folders)))
    print(data_folders)
    return data_folders


train_folders = maybe_extract(train_filename)
test_folders = maybe_extract(test_filename)

image_size = 28  # Pixel width and height.
pixel_depth = 255.0  # Number of levels per pixel.


def load_letter(folder, min_num_images):
    """Load the data for a single letter label."""
    image_files = os.listdir(folder) #folder's content
    dataset = np.ndarray(shape=(len(image_files), image_size, image_size), dtype=np.float32)
    print(folder)
    num_images = 0
    for image in image_files:
        image_file = os.path.join(folder, image)
        try:
            """Every image becomes a 28x28 float-type array"""
            image_data = (ndimage.imread(image_file).astype(float) - pixel_depth / 2) / pixel_depth
            if image_data.shape != (image_size, image_size):
                raise Exception('Unexpected image shape: %s' % str(image_data.shape))
            dataset[num_images, :, :] = image_data
            num_images = num_images + 1
        except IOError as e:
            print('Could not read:', image_file, ':', e, '- it\'s ok, skipping.')

    dataset = dataset[0:num_images, :, :]
    if num_images < min_num_images:
        raise Exception('Many fewer images than expected: %d < %d' %
                        (num_images, min_num_images))

    print('Full dataset tensor:', dataset.shape)
    print('Mean:', np.mean(dataset))
    print('Standard deviation:', np.std(dataset))
    return dataset

def maybe_pickle(data_folders, min_num_images_per_class, force=False):
    dataset_names = []
    for folder in data_folders:
        set_filename = folder + '.pickle'
        dataset_names.append(set_filename)
        if os.path.exists(set_filename) and not force:
            # You may override by setting force=True.
            print('%s already present - Skipping pickling.' % set_filename)
        else:
            print('Pickling %s.' % set_filename)
            dataset = load_letter(folder, min_num_images_per_class)
            try:
                with open(set_filename, 'wb') as f:
                    pickle.dump(dataset, f, pickle.HIGHEST_PROTOCOL)
            except Exception as e:
                print('Unable to save data to', set_filename, ':', e)

    return dataset_names


def pickle_images(letter, image_type = 'notMNIST_small', force=False):

    imagenes = os.listdir(os.path.join(data_root,image_type, letter))
    list_imagenes = []
    path_imagenes =[]

    matrix_images = np.matrix

    for imagen in imagenes:
        try:
            imagen_path = os.path.join(data_root,image_type, letter, imagen)
            imagen_data = pickle.dumps((ndimage.imread(imagen_path).astype(float) - pixel_depth / 2) / pixel_depth)
            list_imagenes.append(imagen_data) #list_imagenes[i] = imagen_data #list_imagenes.append(imagen_data)
            path_imagenes.append(imagen_path) #path_imagenes[i] = imagen_path

        except IOError as e:
            print('Could not read:', imagen_path, ':', e, '- it\'s ok, skipping.')

        tupla_imagenes = [path_imagenes, list_imagenes]
        lista_imagenes = list(tupla_imagenes)
    return lista_imagenes

    #return path_imagenes, list_imagenes #(path_imagenes, list_imagenes)  #set((path_imagenes, list_imagenes))


def create_clean_folder(letter, image_type = 'notMNIST_small', force=False):

    original_folder = os.path.join(data_root,image_type, letter)
    clean_set = set()
    (images_path, images_data) = pickle_images(letter)
    clean_set = [imagen for imagen in images_path if imagen not in clean_set and not clean_set.add(imagen)]
    clean_set = [imagen_path for im_data in images_data if im_data not in clean_set and not clean_set.add(im_data)]

    clean_folder = os.path.join(data_root,image_type, letter + '_clean')

    if os.path.exists(clean_folder) and not force:
        print('Folder exists')# and contains ' % str(len(clean_folder)) % ' pics')
    else:
        os.mkdir(clean_folder) #Creates clean data folder
        try:
            for imagen in clean_set:
                split_ruta, split_imagen = os.path.split(imagen)
                copyfile(imagen, os.path.join(clean_folder, split_imagen))
        except Exception as e:
            print('Unable to copy file data to', clean_folder, ':', e)

def compara(lista1, lista2):
    i = 0
    imagenes_repetidas = set()

    for l1 in lista1:
        for l2 in lista2[1]:
            if l1 == l2:
                print(lista2[0][lista2[1].index(l2)])
                imagenes_repetidas.add(lista2[0][lista2[1].index(l2)])
    return imagenes_repetidas

train_datasets = maybe_pickle(train_folders, 45000)
test_datasets = maybe_pickle(test_folders, 1800)

def make_arrays(nb_rows, img_size):
  if nb_rows:
    dataset = np.ndarray((nb_rows, img_size, img_size), dtype=np.float32)
    labels = np.ndarray(nb_rows, dtype=np.int32)
  else:
    dataset, labels = None, None
  return dataset, labels


def merge_datasets(pickle_files, train_size, valid_size=0):
    num_classes = len(pickle_files)
    valid_dataset, valid_labels = make_arrays(valid_size, image_size)
    train_dataset, train_labels = make_arrays(train_size, image_size)
    vsize_per_class = valid_size // num_classes
    tsize_per_class = train_size // num_classes

    start_v, start_t = 0, 0
    end_v, end_t = vsize_per_class, tsize_per_class
    end_l = vsize_per_class + tsize_per_class
    for label, pickle_file in enumerate(pickle_files):
        try:
            with open(pickle_file, 'rb') as f:
                letter_set = pickle.load(f)
                # let's shuffle the letters to have random validation and training set
                np.random.shuffle(letter_set)
                if valid_dataset is not None:
                    valid_letter = letter_set[:vsize_per_class, :, :]
                    valid_dataset[start_v:end_v, :, :] = valid_letter
                    valid_labels[start_v:end_v] = label
                    start_v += vsize_per_class
                    end_v += vsize_per_class

                train_letter = letter_set[vsize_per_class:end_l, :, :]
                train_dataset[start_t:end_t, :, :] = train_letter
                train_labels[start_t:end_t] = label
                start_t += tsize_per_class
                end_t += tsize_per_class
        except Exception as e:
            print('Unable to process data from', pickle_file, ':', e)
            raise

    return valid_dataset, valid_labels, train_dataset, train_labels

train_size = 200000
valid_size = 10000
test_size = 10000

valid_dataset, valid_labels, train_dataset, train_labels = merge_datasets(
  train_datasets, train_size, valid_size)
_, _, test_dataset, test_labels = merge_datasets(test_datasets, test_size)

print('Training:', train_dataset.shape, train_labels.shape)
print('Validation:', valid_dataset.shape, valid_labels.shape)
print('Testing:', test_dataset.shape, test_labels.shape)

def randomize(dataset, labels):
  permutation = np.random.permutation(labels.shape[0])
  shuffled_dataset = dataset[permutation,:,:]
  shuffled_labels = labels[permutation]
  return shuffled_dataset, shuffled_labels

train_dataset, train_labels = randomize(train_dataset, train_labels)
test_dataset, test_labels = randomize(test_dataset, test_labels)
valid_dataset, valid_labels = randomize(valid_dataset, valid_labels)

pickle_file = os.path.join(data_root, 'notMNIST.pickle')

try:
  f = open(pickle_file, 'wb')
  save = {
    'train_dataset': train_dataset,
    'train_labels': train_labels,
    'valid_dataset': valid_dataset,
    'valid_labels': valid_labels,
    'test_dataset': test_dataset,
    'test_labels': test_labels,
    }
  pickle.dump(save, f, pickle.HIGHEST_PROTOCOL)
  f.close()
except Exception as e:
  print('Unable to save data to', pickle_file, ':', e)
  raise

statinfo = os.stat(pickle_file)
print('Compressed pickle size:', statinfo.st_size)
